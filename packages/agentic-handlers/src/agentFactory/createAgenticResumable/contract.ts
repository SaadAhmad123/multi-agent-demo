import z from 'zod';
import { createArvoOrchestratorContract } from 'arvo-core';
import { buildAgentContractDescription, DEFAULT_AGENT_OUTPUT_FORMAT } from '../agent.utils.js';
import { AgenticMessageContentSchema } from '../schemas.js';

export type CreateAgenticResumableContractParams<
  TUri extends string,
  TName extends string,
  TOutput extends z.AnyZodObject,
> = {
  /**
   * The unique agent resource identifier
   */
  uri: TUri;

  /**
   * Unique identifier for this agent instance.
   *
   * Used in Arvo contract URIs, event type, and agent identification
   * across the system system.
   */
  name: TName;

  /**
   * Human-friendly name for the agent (e.g., "tom", "emma", "sales-assistant").
   * Used for identification and logging purposes.
   */
  alias?: string;

  /**
   * The agent description. This becomes a part of the
   * contract generated by the factory
   */
  description?: string;

  /**
   * Optional structured output format specification.
   *
   * When provided, constrains the agent to return data matching this Zod schema
   * instead of free-form text responses. Useful for data extraction workflows.
   */
  output?: TOutput;

  /**
   * Whether to include conversation history in orchestrator responses.
   *
   * When enabled, the orchestrator will return the complete message history
   * along with the final response, useful for debugging and conversation tracking.
   */
  enableMessageHistoryInResponse?: boolean;
};

export const createAgenticResumableContract = <
  TUri extends string = string,
  TName extends string = string,
  TOutput extends z.AnyZodObject = typeof DEFAULT_AGENT_OUTPUT_FORMAT,
>(
  config: CreateAgenticResumableContractParams<TUri, TName, TOutput>,
) =>
  createArvoOrchestratorContract({
    uri: config.uri as TUri,
    name: `agent.${config.name}` as `agent.${TName}`,
    description: buildAgentContractDescription({
      alias: config.alias,
      description: config.description,
      contractName: `arvo.orc.agent.${config.name}`,
    }),
    versions: {
      '1.0.0': {
        init: z.object({
          message: z.string(),
          additionalSystemPrompt: z.string().optional(),
        }),
        complete: z.object({
          ...(config.enableMessageHistoryInResponse
            ? {
                messages: z
                  .object({
                    role: z.enum(['user', 'assistant']),
                    content: AgenticMessageContentSchema.array(),
                  })
                  .array(),
              }
            : {}),
          output: (config.output ?? DEFAULT_AGENT_OUTPUT_FORMAT) as TOutput,
        }),
      },
    },
    metadata: {
      contractSpecificType: 'AgenticResumable',
      config,
    },
  });

export type AgenticResumableContract<
  TUri extends string = string,
  TName extends string = string,
  TOutput extends z.AnyZodObject = typeof DEFAULT_AGENT_OUTPUT_FORMAT,
> = ReturnType<typeof createAgenticResumableContract<TUri, TName, TOutput>>;

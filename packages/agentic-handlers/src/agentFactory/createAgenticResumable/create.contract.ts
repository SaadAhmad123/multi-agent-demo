import z from 'zod';
import { cleanString, createArvoOrchestratorContract } from 'arvo-core';
import { AgentMessageContentSchema } from '../AgentRunner/schemas.js';
import { DEFAULT_AGENT_OUTPUT_FORMAT } from './utils/defaults.js';

export type CreateAgenticResumableContractParams<
  TUri extends string = string,
  TName extends string = string,
  TOutput extends z.AnyZodObject = z.AnyZodObject,
> = {
  /** The unique agent resource identifier */
  uri: TUri;
  /**  Unique identifier name for the agent */
  name: TName;
  /**
   * Human-friendly name for the agent (e.g., "tom", "emma", etc).
   * Used for direct human-agent interaction
   */
  alias?: string;
  /**
   * The agent description. This becomes a part of the
   * contract generated by the factory
   */
  description?: string;
  /**
   * Optional structured output format specification.
   * When provided, constrains the agent to return data matching this Zod schema
   * instead of free-form text responses. Useful for data extraction workflows.
   */
  output?: TOutput;
  /** Whether to include conversation history in orchestrator responses. */
  enableMessageHistoryInResponse?: boolean;
  /** The function to build the description */
  descriptionBuilder?: (param: {
    alias?: string;
    description?: string;
    contractName: string;
  }) => string;
};

const buildAgentContractDescription: NonNullable<CreateAgenticResumableContractParams['descriptionBuilder']> = (
  param,
) => {
  return cleanString(`
    I am an AI Agent.
    ${param.description ? `# Capabilities\n${param.description}` : '# Capabilities\nAsk me directly for a summary of what I can do.'}
    ${
      param.alias
        ? `# Direct User Interaction
          I am a user-facing AI Agent designed for direct human interaction. 
          Users know me by the name "${param.alias}". They can call me directly by 
          tagging me as "@${param.alias}" in their messages. This allows them to reach out 
          to me specifically when they need my assistance.`
        : ''
    }
    # System Identification
    Within the broader system:
    - My system identifier: "${param.contractName}"
    - My AI Agent compliant ID (used by other AI agents to call me): "${param.contractName.replaceAll('.', '_')}"
    Other AI agents in the system can invoke me using my AI Agent compliant ID when they need to delegate tasks 
    or collaborate on solving user requests.
  `);
};

export const createAgenticResumableContract = <
  TUri extends string = string,
  TName extends string = string,
  TOutput extends z.AnyZodObject = typeof DEFAULT_AGENT_OUTPUT_FORMAT,
>(
  config: CreateAgenticResumableContractParams<TUri, TName, TOutput>,
) =>
  createArvoOrchestratorContract({
    uri: config.uri as TUri,
    name: `agent.${config.name}` as `agent.${TName}`,
    description: (config.descriptionBuilder ?? buildAgentContractDescription)({
      alias: config.alias,
      description: config.description,
      contractName: `arvo.orc.agent.${config.name}`,
    }),
    versions: {
      '1.0.0': {
        init: z.object({
          delagationSource: z
            .object({
              alias: z.string().optional().describe('Provide your user-facing name if you have one'),
              id: z.string().describe('Provide your system id'),
            })
            .optional()
            .describe(
              cleanString(`
              Your identifier, if you are an AI agent, when delegating tasks to me.
              Examples: {"alias":"emma","id":"arvo.orc.agent.support"} or {"id":"arvo.orc.agent.processor"}
            `),
            ),
          message: z.string(),
          additionalSystemPrompt: z.string().optional(),
        }),
        complete: z.object({
          ...(config.enableMessageHistoryInResponse
            ? {
                messages: z
                  .object({
                    role: z.enum(['user', 'assistant']),
                    content: AgentMessageContentSchema.array(),
                  })
                  .array(),
              }
            : {}),
          output: (config.output ?? DEFAULT_AGENT_OUTPUT_FORMAT) as TOutput,
        }),
      },
    },
    metadata: {
      contractSpecificType: 'AgenticResumable',
      config: {
        ...config,
        output: config.output ?? DEFAULT_AGENT_OUTPUT_FORMAT,
        outputFormat: config.output,
      },
    },
  });

export type AgenticResumableContract<
  TUri extends string = string,
  TName extends string = string,
  TOutput extends z.AnyZodObject = typeof DEFAULT_AGENT_OUTPUT_FORMAT,
> = ReturnType<typeof createAgenticResumableContract<TUri, TName, TOutput>>;
